/**
 * @author Florin Patan <florinpatan@gmail.com>
 */

package errmsg

import (
	"net/http"

	"github.com/tapglue/backend/errors"
)

var (
	AccountDescriptionSizeError                 = errors.NewBadRequestError(0, "account description must be between %d and %d characters", "")
	AccountDescriptionTypeError                 = errors.NewBadRequestError(0, "account description is not a valid alphanumeric sequence", "")
	AccountIDIsAlreadySetError                  = errors.NewBadRequestError(0, "account id is already set", "")
	AccountIDMismatchError                      = errors.New(http.StatusConflict, 0, "account ID mismatch", "", false)
	AccountIDZeroError                          = errors.NewBadRequestError(0, "account id can't be 0", "")
	AccountMismatchError                        = errors.NewBadRequestError(0, "account mismatch", "")
	AccountNameSizeError                        = errors.NewBadRequestError(0, "account name must be between %d and %d characters", "")
	AccountNameTypeError                        = errors.NewBadRequestError(0, "account name is not a valid alphanumeric sequence", "")
	AccountNotFoundError                        = errors.NewNotFoundError(0, "account not found", "")
	AccountTokenAlreadySetError                 = errors.NewBadRequestError(0, "account token is already set", "")
	AccountUserEmailInvalidError                = errors.NewBadRequestError(0, "user email is not valid", "")
	AccountUserFirstNameSizeError               = errors.NewBadRequestError(0, "user first name must be between %d and %d characters", "")
	AccountUserFirstNameTypeError               = errors.NewBadRequestError(0, "user first name is not a valid alphanumeric sequence", "")
	AccountUserLastNameSizeError                = errors.NewBadRequestError(0, "user last name must be between %d and %d characters", "")
	AccountUserLastNameTypeError                = errors.NewBadRequestError(0, "user last name is not a valid alphanumeric sequence", "")
	AccountUserMismatchError                    = errors.New(http.StatusConflict, 0, "account user mismatch", "", false)
	AccountUserNotFoundError                    = errors.NewNotFoundError(0, "account user not found", "")
	AccountUserPasswordSizeError                = errors.NewBadRequestError(0, "user password must be between %d and %d characters", "")
	AccountUserURLInvalidError                  = errors.NewBadRequestError(0, "user url is not a valid url", "")
	AccountUserUsernameSizeError                = errors.NewBadRequestError(0, "user username must be between %d and %d characters", "")
	AccountUserUsernameTypeError                = errors.NewBadRequestError(0, "user username is not a valid alphanumeric sequence", "")
	ApplicationAuthTokenUpdateNotAllowedError   = errors.NewBadRequestError(0, "not allowed to update the application token", "")
	ApplicationDescriptionSizeError             = errors.NewBadRequestError(0, "application description must be between %d and %d characters", "")
	ApplicationDescriptionTypeError             = errors.NewBadRequestError(0, "application description is not a valid alphanumeric sequence", "")
	ApplicationIDIsAlreadySetError              = errors.NewBadRequestError(0, "application id is already set", "")
	ApplicationNameSizeError                    = errors.NewBadRequestError(0, "application name must be between %d and %d characters", "")
	ApplicationNameTypeError                    = errors.NewBadRequestError(0, "application name is not a valid alphanumeric sequence", "")
	ApplicationNotFoundError                    = errors.NewNotFoundError(0, "application not found", "application not found")
	ApplicationUserNotActivated                 = errors.NewInternalError(0, "user not activated", "")
	ApplicationUserNotFoundError                = errors.NewNotFoundError(0, "application user not found", "user not found")
	ApplicationUserURLInvalidError              = errors.NewBadRequestError(0, "application url is not a valid url", "")
	AuthMethodNotSupportedError                 = errors.NewBadRequestError(0, "authorization method not supported", "auth method not supported")
	BadJsonReceivedError                        = errors.NewBadRequestError(0, "malformed json received", "")
	BadUserAgentError                           = errors.NewBadRequestError(0, "User-Agent header must be set (1)", "missing ua header")
	ConnectionAlreadyExistsError                = errors.NewBadRequestError(0, "connection already exists", "")
	ConnectionNotFoundError                     = errors.NewNotFoundError(0, "connection not found", "")
	ContentLengthInvalidError                   = errors.NewBadRequestError(0, "Content-Length header is invalid", "content-length header is not an int")
	ContentLengthMissingError                   = errors.NewBadRequestError(0, "Content-Length header missing", "missing content-length header")
	ContentLengthSizeMismatchError              = errors.NewBadRequestError(0, "Content-Length header size mismatch", "content-length header size mismatch")
	ContentTypeMismatchError                    = errors.NewBadRequestError(0, "Content-Type header mismatch", "content-type header mismatch")
	ContentTypeMissingError                     = errors.NewBadRequestError(0, "Content-Type header empty", "missing content-type header")
	EmailAddressInUseError                      = errors.NewBadRequestError(0, "email address already in use", "")
	EventIDIsAlreadySetError                    = errors.NewBadRequestError(0, "event id is already set", "")
	EventInvalidVisiblityError                  = errors.NewBadRequestError(0, "event visibility is invalid", "")
	EventMissingVisiblityError                  = errors.NewBadRequestError(0, "event visibility is missing", "")
	EventNearestNotInBoundsError                = errors.NewBadRequestError(0, "near events limits not within accepted bounds", "nearest not within bounds")
	EventNotFoundError                          = errors.NewNotFoundError(0, "event not found", "")
	GenericAuthenticationError                  = errors.NewBadRequestError(0, "authentication error", "")
	GotBothUsernameAndEmailError                = errors.NewBadRequestError(0, "both username and email are specified", "")
	GotNoUsernameOrEmailError                   = errors.NewBadRequestError(0, "both username and email are empty", "")
	InternalAccountCreationError                = errors.NewInternalError(0, "error while creating the account", "")
	InternalAccountDeleteError                  = errors.NewInternalError(0, "error while deleting the account", "")
	InternalAccountReadError                    = errors.NewInternalError(0, "error while reading the account", "")
	InternalAccountUpdateError                  = errors.NewInternalError(0, "error while updating the account", "")
	InternalAccountUserCreationError            = errors.NewInternalError(0, "error while creating the account user", "")
	InternalAccountUserListError                = errors.NewInternalError(0, "error while retrieving list of account users", "")
	InternalAccountUserReadError                = errors.NewInternalError(0, "error while reading the account user", "")
	InternalAccountUserSessionCreationError     = errors.NewInternalError(0, "error while creating the account user session", "")
	InternalAccountUserSessionDeleteError       = errors.NewInternalError(0, "error while deleting the account user session", "")
	InternalAccountUserSessionReadError         = errors.NewInternalError(0, "error while reading the account user session", "")
	InternalAccountUserSessionUpdateError       = errors.NewInternalError(0, "error while updating the account user session", "")
	InternalAccountUserUpdateError              = errors.NewInternalError(0, "error while updating the account user", "")
	InternalApplicationCreationError            = errors.NewInternalError(0, "error while creating the application", "")
	InternalApplicationDeleteError              = errors.NewInternalError(0, "error while deleting the application", "")
	InternalApplicationReadError                = errors.NewInternalError(0, "error while reading the application", "")
	InternalApplicationUpdateError              = errors.NewInternalError(0, "error while updating the application", "")
	InternalApplicationUserCreationError        = errors.NewInternalError(0, "error while creating the application user", "")
	InternalApplicationUserListError            = errors.NewInternalError(0, "error while retrieving list of application users", "")
	InternalApplicationUserReadError            = errors.NewInternalError(0, "error while reading the application user", "")
	InternalApplicationUserSessionCreationError = errors.NewInternalError(0, "error while creating the application user session", "")
	InternalApplicationUserSessionDeleteError   = errors.NewInternalError(0, "error while deleting session", "")
	InternalApplicationUserSessionReadError     = errors.NewInternalError(0, "error while reading the application user session", "")
	InternalApplicationUserSessionsDeleteError  = errors.NewInternalError(0, "error while deleting all session", "")
	InternalApplicationUserSessionUpdateError   = errors.NewInternalError(0, "error while updating the application user session", "")
	InternalApplicationUserUpdateError          = errors.NewInternalError(0, "error while updating the application user", "")
	InternalConnectingUsersError                = errors.NewInternalError(0, "error while connecting the users", "")
	InternalConnectionCreationError             = errors.NewInternalError(0, "error while creating the connection", "")
	InternalConnectionReadError                 = errors.NewInternalError(0, "error while reading the connection", "")
	InternalConnectionUpdateError               = errors.NewInternalError(0, "error while updating the connection", "")
	InternalEventCreationError                  = errors.NewInternalError(0, "error while saving the event", "")
	InternalEventReadError                      = errors.NewInternalError(0, "error while reading the event", "")
	InternalEventsListError                     = errors.NewInternalError(0, "failed to read the events", "")
	InternalEventUpdateError                    = errors.NewInternalError(0, "error while updating the event", "")
	InternalFollowersListError                  = errors.NewInternalError(0, "error while retrieving list of followers", "")
	InternalFollowingListError                  = errors.NewInternalError(0, "error while retrieving list of following", "")
	InternalFriendsListError                    = errors.NewInternalError(0, "error while retrieving list of friends", "")
	InvalidAccountCredentialsError              = errors.NewBadRequestError(0, "error while reading account credentials", "")
	InvalidAccountUserCredentialsError          = errors.NewBadRequestError(0, "error while reading account user credentials", "")
	InvalidAppIDError                           = errors.NewBadRequestError(0, "application id is not valid", "")
	InvalidApplicationCredentialsError          = errors.NewBadRequestError(0, "error while reading application credentials", "")
	InvalidApplicationUserCredentialsError      = errors.NewBadRequestError(0, "error while reading user credentials", "")
	InvalidEmailAddressError                    = errors.NewBadRequestError(0, "invalid email address", "")
	InvalidEventIDError                         = errors.NewBadRequestError(0, "event id is not valid", "")
	InvalidImageURLError                        = errors.NewBadRequestError(0, "image url is not valid", "")
	InvalidUserIDError                          = errors.NewBadRequestError(0, "user id is not valid", "")
	MissingAccountInContextError                = errors.NewInternalError(0, "missing account context", "")
	MissingJarvisIDError                        = errors.NewNotFoundError(0, "not found", "request does not contain a correct Jarvis auth")
	MissingLastModifiedHeaderError              = errors.NewInternalError(0, "something went wrong", "")
	NoKnownSearchTermsSupplied                  = errors.NewBadRequestError(0, "no known search terms supplied", "no known search terms supplied")
	NotImplementedYetError                      = errors.NewInternalError(0, "not implemented yet", "")
	ParseFloatError                             = errors.NewBadRequestError(0, "", "parse float error")
	PasswordMismatchError                       = errors.NewBadRequestError(0, "different passwords", "")
	PayloadTooBigError                          = errors.New(http.StatusRequestEntityTooLarge, 0, "payload too big", "fat payload detected", false)
	RadiusAndNearestMissingError                = errors.NewBadRequestError(0, "you must specify either a radius or a how many nearest events you want", "invalid radius and nearest")
	RadiusUnder2MError                          = errors.NewBadRequestError(0, "Location radius can't be smaller than 2 meters", "radius smaller than 2")
	RequestBodyEmptyError                       = errors.NewBadRequestError(0, "Empty request body", "empty request body")
	SelfConnectingUserError                     = errors.NewBadRequestError(0, "user is connecting with itself", "self-connecting user")
	SessionTokenMismatchError                   = errors.NewBadRequestError(0, "session token mismatch", "")
	TypeMin3CharsError                          = errors.NewBadRequestError(0, "type at least 3 characters to search", "")
	UserEmailAlreadyExistsError                 = errors.NewBadRequestError(0, "user already exists", "")
	UserEmailInvalidError                       = errors.NewBadRequestError(0, "user email is not valid", "")
	UserFirstNameSizeError                      = errors.NewBadRequestError(0, "user first name must be between %d and %d characters", "")
	UserFirstNameTypeError                      = errors.NewBadRequestError(0, "user first name is not a valid alphanumeric sequence", "")
	UserFromMismatchError                       = errors.NewBadRequestError(0, "user_from mismatch", "")
	UserLastNameSizeError                       = errors.NewBadRequestError(0, "user last name must be between %d and %d characters", "")
	UserLastNameTypeError                       = errors.NewBadRequestError(0, "user last name is not a valid alphanumeric sequence", "")
	UsernameAndEmailAreEmptyError               = errors.NewBadRequestError(0, "user email and username are both empty", "")
	UsernameInUseError                          = errors.NewBadRequestError(0, "username already in use", "")
	UsersNotConnectedError                      = errors.NewNotFoundError(0, "users are not connected", "")
	UserToMismatchError                         = errors.NewBadRequestError(0, "user_to mismatch", "")
	UserURLInvalidError                         = errors.NewBadRequestError(0, "user url is not a valid url", "")
	UserUsernameAlreadyExistsError              = errors.NewBadRequestError(0, "user already exists", "")
	UserUsernameSizeError                       = errors.NewBadRequestError(0, "user username must be between %d and %d characters", "")
	UserUsernameTypeError                       = errors.NewBadRequestError(0, "user username is not a valid alphanumeric sequence", "")
	VerbSizeError                               = errors.NewBadRequestError(0, "verb must be between %d and %d characters", "")
	VerbTypeError                               = errors.NewBadRequestError(0, "verb is not a valid alphanumeric sequence", "")
	WrongConnectionTypeError                    = errors.NewBadRequestError(0, "unexpected connection type", "")
)
